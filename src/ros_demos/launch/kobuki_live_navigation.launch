<?xml version="1.0"?>
<launch>
  <!--
    Autonomous navigation using the kobuki platform in a live setup.
    Uses the following components
    - Localisation: SLAMcore
    - Navigation: move_base
    - Local Planning: TebLocalPlanner
    - Global Planning: GlobalPlanner
    - Obstacle Avoidance: Realsense2 Pointcloud
  -->

  <arg name="default_config_file" value=""/>

  <!--
    Editable arguments
  -->

  <!-- Base -> Realsense Camera Transformation -->
  <arg name="camera_link_frame_xyz" default="$(env CAMERA_LINK_FRAME_XYZ)" doc="Space-separated XYZ pose of the Camera frame with regards to the base"/>
  <arg name="camera_link_frame_rpy" default="$(optenv CAMERA_LINK_FRAME_RPY 0 0 0)" doc="Space-eparated RPY Rotation of the Camera frame with regards to the base"/>

  <!-- Set one of these 2 exclusively.

    If you set the session file then the map will be extracted from that session
    file and it will be used for navigation as well. If you want to run SLAM
    only (i.e., no multisession, thus no loaded session), then you have to manually
    specify the map filepath via the map_for_navigation argument
  -->
  <arg name="session_file" default="$(optenv SESSION_FILE)" doc="Session file, set it to empty if you want to run in classic SLAM"/>
  <arg name="map_for_navigation" default="$(optenv MAP_FOR_NAVIGATION)" doc="Path to the map to use for navigation - Don't use if you've set the session_file"/>

  <!-- map_for_navigation XOR session_file -->
  <arg if="$(eval (map_for_navigation != '') == (session_file != ''))" name="Please_Set_Exclusively_Either_Map_For_Navigation_Or_Session_File"/>
  <arg if="$(eval (map_for_navigation != '') == (session_file != ''))" name="dummy" value="$(arg Please_Set_Exclusively_Either_Map_For_Navigation_Or_Session_File)"/>

  <!-- Optional arguments -->
  <arg name="waypoint_nav" default="$(optenv WAYPOINT_NAV true)" doc="Enable waypoint navigation (bool)"/>
  <arg name="patrol_mode" default="$(optenv PATROL_MODE true)" doc="Follow the given waypoints perpetually"/>
  <arg if="$(eval optenv('CONFIG_FILE') != '')" name="config_file" value="$(env CONFIG_FILE)"/>
  <arg unless="$(eval optenv('CONFIG_FILE') != '')" name="config_file" value="$(arg default_config_file)"/>
  <arg name="output" default="$(optenv OUTPUT screen)"/>

  <!--
    Constants
  -->

  <arg name="use_sim_time" value="false"/>
  <arg name="robot_type" value="kobuki"/>
  <arg name="robot_urdf" value="$(find ros_demos)/descriptions/slamcore-$(arg robot_type).urdf.xacro" doc="Path to the Robot URDF file"/>
  <arg name="waypoint_nav_topic" value="/initialpose" doc="Topic at which the waypoints are provided"/>
  <arg name="waypoint_nav_use_poses" value="true" doc="Whether we provide 2D Poses or 2D Points for waypoint navigation (bool)"/>
  <arg name="map_frame" value="map"/>
  <arg name="odom_frame" value="odom"/>
  <arg name="map_topic" value="$(eval '/map' if arg('map_for_navigation') != '' else '/slamcore/map')"/>
  <arg name="odom_topic" value="/odom"/>
  <arg name="cmd_vel_topic" value="/mobile_base/commands/velocity"/>
  <arg name="camera_tf_root" value="realsense"/>
  <arg name="obstacle_avoidance_params" value="$(find ros_demos)/config/common/obstacle_avoidance_pointcloud.yaml"/>

  <!--
    Nodes
  -->

  <!-- Launch kobuki nodes -->
  <include file="$(dirname)/$(arg robot_type)/setup_live.launch" pass_all_args="true"/>

  <!-- Load robot model -->
  <group if="$(eval robot_urdf != '')">
    <arg name="urdf_command" value="$(find xacro)/xacro $(arg robot_urdf) camera_tf_root:=$(arg camera_tf_root) camera_link_frame_xyz:='$(arg camera_link_frame_xyz)' camera_link_frame_rpy:='$(arg camera_link_frame_rpy)'"/>
    <param name="robot_description" command="$(arg urdf_command)"/>
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="$(arg output)">
      <param name="publish_frequency" type="double" value="30.0"/>
    </node>
  </group>

  <!-- SLAMcore -->
  <include file="$(find slamcore_slam)/launch/run_slam.launch" pass_all_args="true">
    <arg name="map_frame" value="map"/>
    <arg name="odom_frame" value="odom"/>
    <arg name="base_frame" value="slamcore/base_link"/>
    <arg name="generate_map2d" value="true"/>
  </include>

  <!-- Map in case of pure SLAM (no loaded session) -->
  <group if="$(eval arg('map_for_navigation') != '')">
    <node pkg="map_server" type="map_server" name="map_server" args="$(arg map_for_navigation)" required="true"/>
  </group>

  <!-- move_base -->
  <include file="$(dirname)/common/setup_move_base.launch" pass_all_args="true"/>

  <!-- Realsense obstacle avoidance -->
  <include file="$(dirname)/common/setup_realsense_obstacle_avoidance.launch" pass_all_args="true"/>

  <!-- Transform: SLAMcore Estimation Frame <-> Realsense Model Frame -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="pose_estimation_frame_pub"
        args='0.017 0.249 -0.124 0.503 -0.498 0.497 0.502 "slamcore/base_link" "base_footprint"'
        required="true"/>

  <!-- Stop all motion on exit -->
  <node name="stop_motion" pkg="ros_demos" type="stop_motion.sh" args="$(arg cmd_vel_topic)"
    output="$(arg output)"
    required="true"/>

  <!-- Enable waypoint navigation -->
  <group if="$(arg waypoint_nav)">
    <include file="$(dirname)/common/setup_waypoint_nav.launch" pass_all_args="true"/>
  </group>
</launch>
